@page "/"
@using System.Timers
@inject IJSRuntime JSRuntime;

<h1>HSTempo</h1>
<div class="card">
    <div class="card-body">
        <div class="card">
            <div class="card-body">

                <div style="padding-left: 2em">
                    <p><input type="checkbox" @bind="@vdiCheck" class="form-check-input" id="vbi"> VBI</p>
                </div>
                <p>Elapsed Time: @elapsedSecond</p>
                <p>Beat Count: @currentCount</p>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <p>BPM: @currentBPM</p>

                <div class="container">
                    <div class="row">
                        <button class="btn btn-outline-secondary" style="padding: 2em;" @onclick="AdjustUp">Adjust Up</button>
                        <button class="btn btn-outline-secondary" style="padding: 2em;" @onclick="AdjustDown">Adjust Down</button>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<div class="card">
    <div class="card-body">
        <p>Last: @recentTimeMs ms</p>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <button class="btn btn-primary" id="beatButton" style="padding: 3em;" @onclick="ExecBeat" autofocus>Beat</button>
        <button class="btn btn-danger" id="resetButton" style="padding: 3em;" @onclick="Reset">Reset</button>
    </div>
</div>

@code {
    private int currentCount = 0;
    private double currentBPM = 0;
    private int elapsedSecond = 0;

    private Timer beatTimer;

    private Timer vdiTick;
    private Timer vdiTock;

    bool vdiCheck;

    private DateTime currentTime;
    private DateTime startTime;
    private DateTime lastTime;
    private double recentTimeMs;

    protected override void OnInitialized()
    {
        JSRuntime.InvokeVoidAsync("setFocus", "beatButton");
    }

    private void ExecBeat()
    {
        currentTime = DateTime.Now;
        var accumulatedMs = currentTime - startTime;
        currentBPM = Math.Round((currentCount / accumulatedMs.TotalMilliseconds) * 60000);
        currentCount++;

        if (beatTimer == null || beatTimer.Enabled != true)
        {
            StartTimer();
        }

        if (currentCount > 1)
        {
            recentTimeMs = UpdateRecentTime().TotalMilliseconds;
            vdiTock.Enabled = false;
            vdiTick.Interval = 60000 / currentBPM;
            vdiTock.Interval = 60000 / currentBPM / 3;
            vdiTick.Enabled = true;
        }
        else
        {
            vdiTick = new Timer();
            vdiTock = new Timer();
            vdiTick.Elapsed += ProcessTick;
            vdiTick.AutoReset = true;
            vdiTock.Elapsed += ProcessTock;
        }

        lastTime = currentTime;
    }

    private void AdjustUp()
    {
        if (beatTimer != null && beatTimer.Enabled && currentBPM > 0)
        {
            vdiTick.Enabled = false;
            vdiTock.Enabled = false;
            currentBPM++;
            vdiTick.Interval = 60000 / currentBPM;
            vdiTock.Interval = 60000 / currentBPM / 3;
            vdiTick.Enabled = true;
        }
    }

    private void AdjustDown()
    {
        if (beatTimer != null && beatTimer.Enabled && currentBPM > 0)
        {
            vdiTick.Enabled = false;
            vdiTock.Enabled = false;
            currentBPM--;
            vdiTick.Interval = 60000 / currentBPM;
            vdiTock.Interval = 60000 / currentBPM / 3;
            vdiTick.Enabled = true;
        }
    }

    private void ProcessTock(object sender, ElapsedEventArgs e)
    {
        vdiCheck = false;
        vdiTock.Enabled = false;
        this.StateHasChanged();
    }

    private TimeSpan UpdateRecentTime()
    {
        return currentTime - lastTime;
    }

    private void ProcessTick(object sender, ElapsedEventArgs elapsedEventArgs)
    {
        vdiCheck = true;
        this.StateHasChanged();
        vdiTock.Enabled = true;
    }

    private void Reset()
    {
        currentCount = 0;
        StopTimer();
        if (vdiTick != null)
        {
            vdiTick.Enabled = false;
            vdiTick.Close();
        }
        if (vdiTock != null)
        {
            vdiTock.Enabled = false;
            vdiTock.Close();
        }
        
        vdiCheck = false;
        
        JSRuntime.InvokeVoidAsync("setFocus", "beatButton");
    }

    private void StartTimer()
    {
        startTime = DateTime.Now;
        beatTimer = new Timer
        {
            Interval = 1000,
            AutoReset = true
        };
        beatTimer.Elapsed += ProcessSecond;
        beatTimer.Enabled = true;
    }

    private void ProcessSecond(object sender, ElapsedEventArgs elapsedEventArgs)
    {
        elapsedSecond++;
        this.StateHasChanged();
    }

    private void StopTimer()
    {
        if (beatTimer != null && beatTimer.Enabled)
        {
            beatTimer.Enabled = false;
            beatTimer.Stop();
            beatTimer.Close();
        }
        elapsedSecond = 0;
        currentBPM = 0;
        recentTimeMs = 0;
    }

}