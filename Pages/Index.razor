@page "/"
@using System.Timers
@using Newtonsoft.Json
@inject IJSRuntime JSRuntime;

<div @onkeypress="@GetKeyPress">
    <div class="card">
        <div class="card-body">
            <div class="card">
                <div class="card-body">

                    <div style="padding-left: 2em">
                        <p><input type="checkbox" @bind="@vdiCheck" class="form-check-input" id="vbi"> VBI</p>
                    </div>
                    <div class="container" style="font-size: small;">
                        <div class="row">
                            <div class="col-sm">
                                Elapsed Time: @elapsedSecond
                            </div>
                            <div class="col-sm">
                                Beat Count: @currentCount
                            </div>
                            <div class="col-sm">
                                Average (10/15/20): @bpmAverage10 / @bpmAverage15 / @bpmAverage20
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-body">
                    <p>BPM: @currentBPM</p>

                    <div class="container" style="font-size: small;">
                        <div class="row">
                            <div class="col-sm">
                                <button class="btn btn-outline-secondary" @onclick="AdjustUp">Adjust Up</button>
                                <button class="btn btn-outline-secondary" @onclick="AdjustDown">Adjust Down</button>
                                <button class="btn btn-outline-secondary" @onclick="Rebase">Rebase</button>
                            </div>
                            <div class="col-sm">
                                <audio
                                    preload="auto"
                                    src="/sounds/beat.mp3">
                                    Your browser does not support the
                                    <code>audio</code> element.
                                </audio>
                                <input type="checkbox" @bind="@audibleBeat" class="form-check-input" id="audibleBeat"> Audible Beat
                            </div>
                            <div class="col-sm">
                                <button class="btn btn-outline-secondary" onclick="playBeat()">Test Beat</button>
                                <button class="btn btn-outline-secondary" @onclick="DownloadJson">Download Metric</button>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            Stability
            <div class="progress">
                <div class="progress-bar" role="progressbar" style="width: @stability%" aria-valuenow="@stability" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="container">
                <div class="row">
                    <div class="col-sm">
                        <button class="btn btn-primary" id="beatButton" style="padding-top: 1.5em; padding-bottom: 1.5em; width: 100%;" ontouch="ExecBeat" @onclick="ExecBeat">Beat</button>
                    </div>
                    <div class="col-sm">
                        <button class="btn btn-danger" id="resetButton" style="padding-top: 1.5em; padding-bottom: 1.5em; width: 100%;" ontouch="Reset" @onclick="Reset">Reset</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="container" style="font-size: small;">
                <div class="row">
                    <div class="col-sm">
                        Last: @recentTimeMs ms
                    </div>
                    <div class="col-sm">
                        Average: @averageMS ms
                    </div>
                    <div class="col-sm">
                        BPM Interval: @bpmInterval ms
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <p class="card-text" style="font-size: x-small;"><span style="color: red;">Warning</span>: Various factors may affect accuracy of the measurement. Do not rely on this system for mission critical applications. The HSTempoWasm developers are not responsible for any damages caused by use of this system.</p>
        </div>
    </div>
</div>

@code {
    private int currentCount = 0;
    private double currentBPM = 0;
    private int elapsedSecond = 0;

    double[] bpmValue10 = new double[10];
    double[] bpmValue15 = new double[15];
    double[] bpmValue20 = new double[20];

    string bpmAverage10 = "X";
    string bpmAverage15 = "X";
    string bpmAverage20 = "X";

    int bpmPoint10 = 0;
    int bpmPoint15 = 0;
    int bpmPoint20 = 0;

    int averageMS = 0;
    int bpmInterval = 0;

    bool vdiCheck;
    bool audibleBeat;

    private DateTime currentTime;
    private DateTime startTime;
    private DateTime lastTime;
    private double recentTimeMs;

    double stability = 0;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("setFocus", "beatButton");
        }
    }

    void GetKeyPress(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "r":
            case "R":
            {
                Reset();
                break;
            }

            case "b":
            case "B":
            {
                JSRuntime.InvokeVoidAsync("setFocus", "beatButton");
                break;
            }

            case "u":
            case "U":
            {
                AdjustUp();
                break;
            }

            case "d":
            case "D":
            {
                AdjustDown();
                break;
            }
        }
    }


    private class MetricInfo
    {
        [JsonProperty("elapsed")] public TimeSpan Elapsed { get; set; }
        [JsonProperty("count")] public int Count { get; set; }
        [JsonProperty("measured_bpm")] public int MeasuredBpm { get; set; }
        [JsonProperty("ms")] public int Ms { get; set; }
    }

    private class Record
    {
        [JsonProperty("average_bpm")] public int AverageBpm { get; set; }
        [JsonProperty("average_ms")] public int AverageMs { get; set; }
        [JsonProperty("metric")] public List<MetricInfo> Metric { get; set; }
    }

    private Record _sessionRecord = null;
    
    private void ExecBeat()
    {
        currentTime = DateTime.Now;
        var accumulatedMs = currentTime - startTime;
        currentBPM = Math.Round((currentCount / accumulatedMs.TotalMilliseconds) * 60000);
        currentCount++;

        if (Timers.BeatTimer == null || Timers.BeatTimer.Enabled != true)
        {
            _sessionRecord = new Record();
            _sessionRecord.Metric = new List<MetricInfo>();
            StartTimer();
        }

        if (currentCount > 1)
        {
            recentTimeMs = UpdateRecentTime().TotalMilliseconds;
            Timers.VdiTock.Enabled = false;
            Timers.VdiTick.Interval = 60000 / currentBPM;
            Timers.VdiTock.Interval = 60000 / currentBPM / 3;
            Timers.VdiTick.Enabled = true;
            bpmInterval = CalculateBPMtoMS();
            averageMS = (int) (accumulatedMs.TotalMilliseconds / currentCount);

            bpmValue10[bpmPoint10] = currentBPM;
            bpmPoint10++;
            if (bpmPoint10 > 9)
                bpmPoint10 = 0;

            bpmValue15[bpmPoint15] = currentBPM;
            bpmPoint15++;
            if (bpmPoint15 > 14)
                bpmPoint15 = 0;

            bpmValue20[bpmPoint20] = currentBPM;
            bpmPoint20++;
            if (bpmPoint20 > 19)
                bpmPoint20 = 0;

            double bpmAverageValue10 = 0, bpmAverageValue15 = 0, bpmAverageValue20 = 0;

            if (currentCount > 10)
            {
                bpmAverageValue10 = Math.Round(bpmValue10.Sum() / 10);
                bpmAverage10 = bpmAverageValue10.ToString();
            }

            if (currentCount > 15)
            {
                bpmAverageValue15 = Math.Round(bpmValue15.Sum() / 15);
                bpmAverage15 = bpmAverageValue15.ToString();
            }

            if (currentCount > 20)
            {
                bpmAverageValue20 = Math.Round(bpmValue20.Sum() / 20);
                bpmAverage20 = bpmAverageValue20.ToString();
                stability = (20 - Math.Abs(currentBPM - (bpmAverageValue10 + bpmAverageValue15 + bpmAverageValue20) / 3)) / 20 * 100;
            }

            _sessionRecord.AverageBpm = (int) currentBPM;
            _sessionRecord.AverageMs = (int) averageMS;
            var newMetric = new MetricInfo
            {
                MeasuredBpm = (int) currentBPM,
                Count = (int) currentCount,
                Elapsed = new TimeSpan(0,0,elapsedSecond),
                Ms = (int) recentTimeMs
            };
            
            _sessionRecord.Metric.Add(newMetric);
        }
        else
        {
            Timers.VdiTick = new Timer();
            Timers.VdiTock = new Timer();
            Timers.VdiTick.Elapsed += ProcessTick;
            Timers.VdiTick.AutoReset = true;
            Timers.VdiTock.Elapsed += ProcessTock;
        }

        lastTime = currentTime;
    }

    private short CalculateBPMtoMS()
    {
        return currentBPM <= 0 ? (short) 0 : Convert.ToInt16(Math.Round(60000 / currentBPM));
    }


    private void DownloadJson()
    {
        var result = GenerateMetricJson();
        if (result != null)
        {
            var bytes = System.Text.Encoding.UTF8.GetBytes(result);
            SaveAs(JSRuntime, "result.json", bytes);
        }
    }
    
    private string GenerateMetricJson()
    {
        if (_sessionRecord != null)
        {
            return JsonConvert.SerializeObject(_sessionRecord);
        }
        return null;
    }
    
    public async static Task SaveAs(IJSRuntime js, string filename, byte[] data)
    {
        await js.InvokeAsync<object>(
            "saveAsFile",
            filename,
            Convert.ToBase64String(data));
    }            
    
    private void Rebase()
    {
        if (Timers.BeatTimer != null && Timers.BeatTimer.Enabled && currentBPM > 0)
        {
            Timers.VdiTick.Enabled = false;
            Timers.VdiTock.Enabled = false;
            Timers.VdiTick.Enabled = true;
        }
    }

    private void AdjustUp()
    {
        if (Timers.BeatTimer != null && Timers.BeatTimer.Enabled && currentBPM > 0)
        {
            Timers.VdiTick.Enabled = false;
            Timers.VdiTock.Enabled = false;
            currentBPM++;
            Timers.VdiTick.Interval = 60000 / currentBPM;
            Timers.VdiTock.Interval = 60000 / currentBPM / 3;
            Timers.VdiTick.Enabled = true;
            bpmInterval = CalculateBPMtoMS();
        }
    }

    private void AdjustDown()
    {
        if (Timers.BeatTimer != null && Timers.BeatTimer.Enabled && currentBPM > 0)
        {
            Timers.VdiTick.Enabled = false;
            Timers.VdiTock.Enabled = false;
            currentBPM--;
            Timers.VdiTick.Interval = 60000 / currentBPM;
            Timers.VdiTock.Interval = 60000 / currentBPM / 3;
            Timers.VdiTick.Enabled = true;
            bpmInterval = CalculateBPMtoMS();
        }
    }

    private void ProcessTock(object sender, ElapsedEventArgs e)
    {
        vdiCheck = false;
        Timers.VdiTock.Enabled = false;
        this.StateHasChanged();
    }

    private TimeSpan UpdateRecentTime()
    {
        return currentTime - lastTime;
    }

    private void TestBeat()
    {
        JSRuntime.InvokeVoidAsync("playBeat");
    }

    private void ProcessTick(object sender, ElapsedEventArgs elapsedEventArgs)
    {
        if (audibleBeat)
        {
            JSRuntime.InvokeVoidAsync("playBeat");
        }
        vdiCheck = true;
        this.StateHasChanged();
        Timers.VdiTock.Enabled = true;
    }

    private void Reset()
    {
        StopTimer();

        if (Timers.VdiTick != null)
        {
            Timers.VdiTick.Enabled = false;
            Timers.VdiTick.Close();
        }
        if (Timers.VdiTock != null)
        {
            Timers.VdiTock.Enabled = false;
            Timers.VdiTock.Close();
        }

        audibleBeat = false;
        vdiCheck = false;

        currentCount = 0;
        averageMS = 0;
        bpmInterval = 0;

        JSRuntime.InvokeVoidAsync("setFocus", "beatButton");

        stability = 0;
        bpmAverage10 = "X";
        bpmAverage15 = "X";
        bpmAverage20 = "X";
    }

    private void StartTimer()
    {
        startTime = DateTime.Now;
        Timers.BeatTimer = new Timer
        {
            Interval = 1000,
            AutoReset = true
        };
        Timers.BeatTimer.Elapsed += ProcessSecond;
        Timers.BeatTimer.Enabled = true;
    }

    private void ProcessSecond(object sender, ElapsedEventArgs elapsedEventArgs)
    {
        elapsedSecond++;
        this.StateHasChanged();
    }

    private void StopTimer()
    {
        if (Timers.BeatTimer != null && Timers.BeatTimer.Enabled)
        {
            Timers.BeatTimer.Enabled = false;
            Timers.BeatTimer.Stop();
            Timers.BeatTimer.Close();
        }
        elapsedSecond = 0;
        currentBPM = 0;
        recentTimeMs = 0;
    }

}